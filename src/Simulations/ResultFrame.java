package Simulations;import javax.swing.*;import java.util.Arrays;import Algorithms.*;public class ResultFrame extends JFrame{    private JTextArea textArea;    public ResultFrame(String algorithmName, String environmentName)    {        setTitle("Test Result " + algorithmName + " "+environmentName);        setSize(600, 400);        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        textArea = new JTextArea();        textArea.setEditable(false);        add(new JScrollPane(textArea));    }    public void reportGeneticResults(Environment env, int[] path, GeneticAlgorithm ga, long startTime, long endTime)    {        StringBuilder results = new StringBuilder();        results.append("Ortam: ").append(env.environmentName).append("\n");        results.append("Algoritma : ").append(ga.getName()).append("\n");        results.append("Genetic Algorithm Stats: " +"Population Size: "+ ga.getPopulationSize()+"\n"+                "Mutation Rate: "+ga.getMutationRate()+"\n"+                "Chromosome Length: "+ga.getChromosomeLength()+"\n"+                "Max Generations: " +ga.getMaxGenerations()+"\n");        if (path != null)        {            results.append("Bulunan Yol: ").append(Arrays.toString(path)).append("\n");            results.append("Adım Sayısı: ").append(path.length).append("\n");        }        else        {            results.append("Bulunan Yol: Yok (Hedefe ulaşılamadı)").append("\n");            results.append("Adım Sayısı: 0").append("\n");        }        results.append("Toplam Oluşturulan Kromozom Sayısı: ").append(ga.getTotalChromosomesGenerated()).append("\n");        results.append("Hedefe Ulaşıldı mı: ").append(ga.isGoal()).append("\n");        results.append("Çalışma Süresi: ").append((endTime - startTime) / 1_000_000.0 / 1000.0).append(" s").append("\n");        results.append("\n");        textArea.setText(results.toString());    }    public void reportAstarSearchResult(Environment env, int[] path, AStarSearch aStarSearch, long startTime, long endTime) {        StringBuilder results = new StringBuilder();        results.append("Ortam: ").append(env.environmentName).append("\n");        results.append("Algoritma: ").append(aStarSearch.getName()).append("\n");        if (path != null) {            results.append("Bulunan Yol: ").append(Arrays.toString(path)).append("\n");            results.append("Adım Sayısı: ").append(path.length).append("\n");        } else {            results.append("Bulunan Yol: Yok (Hedefe ulaşılamadı)").append("\n");            results.append("Adım Sayısı: 0").append("\n");        }        results.append("Hedefe Ulaşıldı mı: ").append(aStarSearch.isGoal()).append("\n");        results.append("Çalışma Süresi: ").append((endTime - startTime) / 1_000_000.0 / 1000.0).append(" s").append("\n");        results.append("Toplam Oluşturulan Node Sayısı: ").append(aStarSearch.totalNodeCount).append("\n");        // Her node için ayrı bir satır        String nodeListFormatted = aStarSearch.nodeList.replaceAll("\\),", "\\)\n");        results.append("Toplam Oluşturulan Node: \n").append(nodeListFormatted).append("\n");        results.append("\n");        textArea.setText(results.toString());    }    public void reportUniformCostSearchResult(Environment env, int[] path, UniformCostSearch aStarSearch, long startTime, long endTime) {        StringBuilder results = new StringBuilder();        results.append("Ortam: ").append(env.environmentName).append("\n");        results.append("Algoritma : ").append(aStarSearch.getName()).append("\n");        if (path != null) {            results.append("Bulunan Yol: ").append(Arrays.toString(path)).append("\n");            results.append("Adım Sayısı: ").append(path.length).append("\n");        } else {            results.append("Bulunan Yol: Yok (Hedefe ulaşılamadı)").append("\n");            results.append("Adım Sayısı: 0").append("\n");        }        results.append("Toplam Oluşturulan Node Sayısı: ").append(aStarSearch.totalNodeCount).append("\n");        results.append("Hedefe Ulaşıldı mı: ").append(aStarSearch.isGoal()).append("\n");        results.append("Çalışma Süresi: ").append((endTime - startTime) / 1_000_000.0 / 1000.0).append(" s").append("\n");        results.append("\n");        textArea.setText(results.toString());    }}