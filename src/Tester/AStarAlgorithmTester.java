package Tester;import javax.swing.*;import java.util.*;import Algorithms.*;import Simulations.*;public class AStarAlgorithmTester{    public static void main(String[] args)    {        Map<Environment, AStarSearch> environments = createTestEnvironments();        for (Map.Entry<Environment, AStarSearch> entry : environments.entrySet())        {            Environment env = entry.getKey();            AStarSearch aStarSearch = entry.getValue();            env.printEnvironment();            // Her ortam için yeni bir Robot oluştur            Robot robot = new Robot(aStarSearch,env);            // Algoritmanın başlama zamanını kaydet            long startTime = System.nanoTime();            // Her ortam için yeni bir Simulator oluştur            var simulator = new Simulator(false, robot, env);            // Simülasyonu çalıştır            int[] path = robot.startSearching(simulator);            // Algoritmanın bitiş zamanını kaydet            long endTime = System.nanoTime();            // Sonuçları raporla            reportResults(env, path, aStarSearch, startTime, endTime);            // Simulator ve Robot nesnelerini temizle veya sıfırla            env.printEnvironment();            robot.setPosition(0,9);        }    }    private static  Map<Environment, AStarSearch> createTestEnvironments() {        Map<Environment, AStarSearch> environments = new HashMap<>() {};        var defaultEnvironment = new Environment(Environments.environment);        var lessComplexEnvironment = new Environment(Environments.Less_Complex_environment);        var midComplexEnvironment = new Environment(Environments.Mid_Complex_environment);        var highComplexEnvironment = new Environment(Environments.High_Complex_environment);        var ultraComplexEnvironment = new Environment(Environments.Ultra_Complex_environment);        environments.put(defaultEnvironment,new AStarSearch(defaultEnvironment)); // default environment        environments.put(lessComplexEnvironment,new AStarSearch(lessComplexEnvironment)); // less complex environment        environments.put(midComplexEnvironment,new AStarSearch(midComplexEnvironment)); // mid complex environment        environments.put(highComplexEnvironment,new AStarSearch(highComplexEnvironment)); // high complex environment        environments.put(ultraComplexEnvironment,new AStarSearch(ultraComplexEnvironment)); // ultra complex environment        return environments;    }    private static void reportResults(Environment env, int[] path, AStarSearch ga, long startTime , long endTime)    {        SwingUtilities.invokeLater(new Runnable() {            public void run() {                ResultFrame resultFrame = new ResultFrame("AStar Algorithm ", env.environmentName.toString());                resultFrame.reportAstarSearchResult(env, path, ga, startTime, endTime);                resultFrame.setVisible(true); // Pencereyi görünür yap            }        });    }}